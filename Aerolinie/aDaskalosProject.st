<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorks® NonCommercial, 7.4.1 of May 30, 2006 on May 1, 2023 at 11:46:02 am</time-stamp>


<class>
<name>Aeroport</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>nazev mesto zeme </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Aeroport class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#zeme -&gt; Core.String); add: (#nazev -&gt; Core.String); add: (#mesto -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Aeroport</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="mesto">mesto
"generated by Daskalos"

     ^mesto</body>

<body package="DaskalosUserClasses" selector="mesto:">mesto: anObject
"generated by Daskalos"

     mesto := (self checkValue: anObject forVariable: #mesto)</body>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject
"generated by Daskalos"

     nazev := (self checkValue: anObject forVariable: #nazev)</body>

<body package="DaskalosUserClasses" selector="zeme">zeme
"generated by Daskalos"

     ^zeme</body>

<body package="DaskalosUserClasses" selector="zeme:">zeme: anObject
"generated by Daskalos"

     zeme := (self checkValue: anObject forVariable: #zeme)</body>
</methods>

<methods>
<class-id>Aeroport</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     nazev := nil.
     mesto := nil.
     zeme := nil.
</body>
</methods>


<class>
<name>Let</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>mistoOdletu datumOdletu mistoPriletu </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Let class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#mistoPriletu -&gt; Core.Object); add: (#datumOdletu -&gt; Core.Date); add: (#mistoOdletu -&gt; Core.Object); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Let</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="datumOdletu">datumOdletu
"generated by Daskalos"

     ^datumOdletu</body>

<body package="DaskalosUserClasses" selector="datumOdletu:">datumOdletu: anObject
"generated by Daskalos"

     datumOdletu := (self checkValue: anObject forVariable: #datumOdletu)</body>

<body package="DaskalosUserClasses" selector="mistoOdletu">mistoOdletu
"generated by Daskalos"

     ^mistoOdletu</body>

<body package="DaskalosUserClasses" selector="mistoOdletu:">mistoOdletu: anObject
"generated by Daskalos"

     mistoOdletu := (self checkValue: anObject forVariable: #mistoOdletu)</body>

<body package="DaskalosUserClasses" selector="mistoPriletu">mistoPriletu
"generated by Daskalos"

     ^mistoPriletu</body>

<body package="DaskalosUserClasses" selector="mistoPriletu:">mistoPriletu: anObject
"generated by Daskalos"

     mistoPriletu := (self checkValue: anObject forVariable: #mistoPriletu)</body>
</methods>

<methods>
<class-id>Let</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     mistoOdletu := nil.
     datumOdletu := nil.
     mistoPriletu := nil.
</body>
</methods>

<methods>
<class-id>Let</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="kodLetu">kodLetu
	| mistoOdletuKod mistoPriletuKod |
	mistoOdletuKod := mistoOdletu mesto copyFrom: 1 to: 2.
	mistoPriletuKod := mistoPriletu mesto copyFrom: 1 to: 2.
	^(mistoOdletuKod , mistoPriletuKod , '2023') asUppercase</body>
</methods>


<class>
<name>Letenka</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>trida pasazer kodLetu </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<shared-variable>
<name>Lety</name>
<environment>Letenka</environment>
<private>false</private>
<constant>false</constant>
<category>As yet unclassified</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</shared-variable>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Letenka class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#kodLetu -&gt; Core.Object); add: (#pasazer -&gt; Core.Object); add: (#trida -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Letenka</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="kodLetu">kodLetu
"generated by Daskalos"

     ^kodLetu</body>

<body package="DaskalosUserClasses" selector="kodLetu:">kodLetu: anObject
"generated by Daskalos"

     kodLetu := (self checkValue: anObject forVariable: #kodLetu)</body>

<body package="DaskalosUserClasses" selector="pasazer">pasazer
"generated by Daskalos"

     ^pasazer</body>

<body package="DaskalosUserClasses" selector="trida">trida
"generated by Daskalos"

     ^trida</body>

<body package="DaskalosUserClasses" selector="trida:">trida: anObject
"generated by Daskalos"

     trida := (self checkValue: anObject forVariable: #trida)</body>
</methods>

<methods>
<class-id>Letenka</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     trida := nil.
     pasazer := nil.
     kodLetu := nil.
</body>
</methods>

<methods>
<class-id>Letenka</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="cena">cena
	| zaklad konecnaCena |
	zaklad := trida = 'Ekonomická' 
				ifTrue: [1000]
				ifFalse: 
					[trida = 'Business' 
						ifTrue: [1800]
						ifFalse: [trida = 'Prvni' ifTrue: [2700] ifFalse: [0]]].
	konecnaCena := pasazer vek &lt; 18 ifTrue: [zaklad * 0.85] ifFalse: [zaklad].
	^konecnaCena</body>
</methods>


<class>
<name>Osoba</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>jmeno prijmeni </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Osoba class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Osoba</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="jmeno">jmeno
"generated by Daskalos"

     ^jmeno</body>

<body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject
"generated by Daskalos"

     jmeno := (self checkValue: anObject forVariable: #jmeno)</body>

<body package="DaskalosUserClasses" selector="prijmeni">prijmeni
"generated by Daskalos"

     ^prijmeni</body>

<body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject
"generated by Daskalos"

     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body>
</methods>

<methods>
<class-id>Osoba</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     jmeno := nil.
     prijmeni := nil.
</body>
</methods>


<class>
<name>Zamestnanec</name>
<environment>Smalltalk</environment>
<super>Osoba</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>pozice datumNastupu </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zamestnanec class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#datumNarozeni -&gt; Core.Date); add: (#datumNastupu -&gt; Core.Date); add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#pozice -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zamestnanec</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="datumNastupu">datumNastupu
"generated by Daskalos"

     ^datumNastupu</body>

<body package="DaskalosUserClasses" selector="datumNastupu:">datumNastupu: anObject
"generated by Daskalos"

     datumNastupu := (self checkValue: anObject forVariable: #datumNastupu)</body>

<body package="DaskalosUserClasses" selector="pozice">pozice
"generated by Daskalos"

     ^pozice</body>

<body package="DaskalosUserClasses" selector="pozice:">pozice: anObject
"generated by Daskalos"

     pozice := (self checkValue: anObject forVariable: #pozice)</body>
</methods>

<methods>
<class-id>Zamestnanec</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     pozice := nil.
     datumNastupu := nil.
</body>
</methods>

<methods>
<class-id>Zamestnanec</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="plat">plat
	| vypocet dobaZamestnani |
	vypocet := pozice = 'pilot' 
				ifTrue: [70000]
				ifFalse: 
					[pozice = 'mechanik' 
						ifTrue: [50000]
						ifFalse: [pozice = 'letuska' ifTrue: [35000] ifFalse: [32000]]].
	dobaZamestnani := (Date today year - datumNastupu year) * 12 
				+ (Date today monthIndex - datumNastupu monthIndex).
	vypocet := dobaZamestnani &gt;= 48 
				ifTrue: [vypocet * 1.09]
				ifFalse: [dobaZamestnani &gt;= 24 ifTrue: [vypocet * 1.05] ifFalse: [vypocet]].
	^vypocet</body>
</methods>


<class>
<name>Pasazer</name>
<environment>Smalltalk</environment>
<super>Osoba</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>datumNarozeni </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Pasazer class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Pasazer</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni
"generated by Daskalos"

     ^datumNarozeni</body>

<body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject
"generated by Daskalos"

     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body>
</methods>

<methods>
<class-id>Pasazer</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     datumNarozeni := nil.
</body>
</methods>

<methods>
<class-id>Pasazer</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="vek">vek
	^((Date today subtractDate: datumNarozeni) / 365.25) asInteger</body>
</methods>


</st-source>
